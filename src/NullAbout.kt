
fun main() {

    // используйте символ вопросительного знака после типа данных
    var nullableVariable: Int? = null

    // ?.: Оператор безопасного вызова. Он позволяет вызывать методы или обращаться к полям объекта только в том случае,
    // если ссылка на объект не является null. Если ссылка равна null, то возвращается null,
    // и дальнейшее выполнение цепочки прекращается.
    val str: String? = "Home"
    val length: Int? = str?.length
    println(length)

    // ?.let { }: Блок let - это способ выполнения определенного блока кода, когда значение переменной не является null.
    // Он может использоваться для безопасной работы с nullable объектами.
    // Позволяет выполнить блок кода только в случае, если объект не является null.
    // Объект доступен внутри блока кода как it.
    // Применяется, когда необходимо выполнить последовательность операций с объектом, но только если он не null.
    val str2: String? = "Хелло" // Тут любая строка или null
    nullableVariable?.let {
        // Блок кода, который будет выполнен, если nullableVariable не является null
        println(it)
    }

    // Safe Cast операторы
    // as?: Безопасное преобразование типа.
    // Оператор as? позволяет преобразовывать типы данных без риска возникновения ClassCastException в случае,
    // если преобразование невозможно. Если преобразование выполнить нельзя, то будет возвращено значение null.
    val str3: String? = "Hello" // Тут любая строка или null
    val strToInt: Int? = str3 as? Int
    println(strToInt)

    // Проверка на null через if-выражение
    val str4: String? = "Hello"
    if (str4 != null) {
        println("Длина строки: ${str4.length}") // Блок кода выполнится только если str не null
    } else {
        println("Строка равна null")
    }

    // Оператор Элвиса ?:
    // Позволяет указать значение по умолчанию, которое будет использовано, если переменная содержит null
    val result = nullableVariable ?: "Hello"

}